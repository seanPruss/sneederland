#!/bin/bash

# HyprV4 By SolDoesTech - https://www.youtube.com/@SolDoesTech
# License..? - You may copy, edit and ditribute this script any way you like, enjoy! :)

# The follwoing will attempt to install all needed packages to run Hyprland
# This is a quick and dirty script there are some error checking
# IMPORTANT - This script is meant to run on a clean fresh Arch install on physical hardware

# Define the software that would be inbstalled
#Need some prep work
prep_stage=(
	qt5-wayland
	qt5ct
	qt6-wayland
	qt6ct
	qt5-svg
	qt5-quickcontrols2
	qt5-graphicaleffects
	gtk3
	polkit-gnome
	pipewire
	wireplumber
	jq
	wl-clipboard
	cliphist
	python-requests
	pacman-contrib
)

#software for nvidia GPU only
nvidia_stage=(
	linux-headers
	nvidia-dkms
	nvidia-settings
	libva
	libva-nvidia-driver-git
)

#the main packages
install_stage=(
	rust
	jdk-openjdk
	flatpak
	cmatrix
	npm
	auto-cpufreq
	kitty-git
	mako
	waybar
	swww
	swaylock-effects
	wofi
	wlogout
	xdg-desktop-portal-hyprland
	swappy
	grim
	slurp
	thunar
	btop
	floorp-bin
	webcord-bin
	spotify
	spicetify-cli-git
	spicetify-themes-git
	geoclue
	redshift-wayland-git
	zsh-git
	zsh-auto-notify
	zsh-fast-syntax-highlighting-git
	zsh-autoswitch-virtualenv-git
	fzf-tab-git
	zsh-autosuggestions-git
	zsh-history-substring-search-git
	zsh-you-should-use
	zsh-autopair-git
	zsh-directory-history-git
	uwufetch-git
	urlview-git
	tmux-git
	ripgrep
	neovim-git
	yazi-git
	lazygit-git
	zoxide-git
	eza-git
	rose-pine-gtk-theme-full
	rose-pine-cursor
	libreoffice-fresh
	thunderbird
	mpv
	pamixer
	pavucontrol
	brightnessctl
	bluez
	bluez-utils
	blueman
	network-manager-applet
	gvfs
	thunar-archive-plugin
	file-roller
	starship
	ttf-jetbrains-mono-nerd
	noto-fonts-emoji
	lxappearance
	xfce4-settings
	nwg-look-bin
	sddm
)

for str in ${myArray[@]}; do
	echo $str
done

# set some colors
CNT="[\e[1;36mNOTE\e[0m]"
COK="[\e[1;32mOK\e[0m]"
CER="[\e[1;31mERROR\e[0m]"
CAT="[\e[1;37mATTENTION\e[0m]"
CWR="[\e[1;35mWARNING\e[0m]"
CAC="[\e[1;33mACTION\e[0m]"
INSTLOG="install.log"

######
# functions go here

# function that would show a progress bar to the user
show_progress() {
	while ps | grep $1 &>/dev/null; do
		echo -n "."
		sleep 2
	done
	echo -en "Done!\n"
	sleep 2
}

# function that will test for a package and if not found it will attempt to install it
install_software() {
	# First lets see if the package is there
	if yay -Q $1 &>>/dev/null; then
		echo -e "$COK - $1 is already installed."
	else
		# no package found so installing
		echo -en "$CNT - Now installing $1 ."
		yay -S --noconfirm $1 &>>$INSTLOG &
		show_progress $!
		# test to make sure package installed
		if yay -Q $1 &>>/dev/null; then
			echo -e "\e[1A\e[K$COK - $1 was installed."
		else
			# if this is hit then a package is missing, exit to review log
			echo -e "\e[1A\e[K$CER - $1 install had failed, please check the install.log"
			exit
		fi
	fi
}

# clear the screen
clear

# set some expectations for the user
echo -e "$CNT - You are about to execute a script that would attempt to setup Hyprland.
Please note that Hyprland is still in Beta."
sleep 1

# attempt to discover if this is a VM or not
echo -e "$CNT - Checking for Physical or VM..."
ISVM=$(hostnamectl | grep Chassis)
echo -e "Using $ISVM"
if [[ $ISVM == *"vm"* ]]; then
	echo -e "$CWR - Please note that VMs are not fully supported and if you try to run this on
    a Virtual Machine there is a high chance this will fail."
	sleep 1
fi

# let the user know that we will use sudo
echo -e "$CNT - This script will run some commands that require sudo. You will be prompted to enter your password.
If you are worried about entering your password then you may want to review the content of the script."
sleep 1

# give the user an option to exit out
read -rep $'[\e[1;33mACTION\e[0m] - Would you like to continue with the install (y,n) ' CONTINST
if [[ $CONTINST == "Y" || $CONTINST == "y" ]]; then
	echo -e "$CNT - Setup starting..."
	sudo touch /tmp/hyprv.tmp
else
	echo -e "$CNT - This script will now exit, no changes were made to your system."
	exit
fi

# find the Nvidia GPU
if lspci -k | grep -A 2 -E "(VGA|3D)" | grep -iq nvidia; then
	ISNVIDIA=true
else
	ISNVIDIA=false
fi

### Disable wifi powersave mode ###
read -rep $'[\e[1;33mACTION\e[0m] - Would you like to disable WiFi powersave? (y,n) ' WIFI
if [[ $WIFI == "Y" || $WIFI == "y" ]]; then
	LOC="/etc/NetworkManager/conf.d/wifi-powersave.conf"
	echo -e "$CNT - The following file has been created $LOC.\n"
	echo -e "[connection]\nwifi.powersave = 2" | sudo tee -a $LOC &>>$INSTLOG
	echo -en "$CNT - Restarting NetworkManager service, Please wait."
	sleep 2
	sudo systemctl restart NetworkManager &>>$INSTLOG

	#wait for services to restore (looking at you DNS)
	for i in {1..6}; do
		echo -n "."
		sleep 1
	done
	echo -en "Done!\n"
	sleep 2
	echo -e "\e[1A\e[K$COK - NetworkManager restart completed."
fi

#### Check for package manager ####
if [ ! -f /sbin/yay ]; then
	echo -en "$CNT - Configuring yay."
	git clone https://aur.archlinux.org/yay.git &>>$INSTLOG
	cd yay
	makepkg -si --noconfirm &>>../$INSTLOG &
	show_progress $!
	if [ -f /sbin/yay ]; then
		echo -e "\e[1A\e[K$COK - yay configured"
		cd ..

		# update the yay database
		echo -en "$CNT - Updating yay."
		yay -Suy --noconfirm &>>$INSTLOG &
		show_progress $!
		echo -e "\e[1A\e[K$COK - yay updated."
	else
		# if this is hit then a package is missing, exit to review log
		echo -e "\e[1A\e[K$CER - yay install failed, please check the install.log"
		exit
	fi
fi

# copy my configs
echo -e "$CNT Copying config files"
rm -rf ~/.config
git clone https://github.com/seanPruss/.config ~/.config
rm -rf ~/.config/nvim
git clone https://github.com/seanPruss/the-sneed-editor ~/.config/nvim
sudo echo "ParallelDownloads = 5" >>/etc/pacman.conf
sudo echo "Color" >>/etc/pacman.conf
sudo echo "ILoveCandy" >>/etc/pacman.conf
# Prep Stage - Bunch of needed items
echo -e "$CNT - Prep Stage - Installing needed components, this may take a while..."
for SOFTWR in ${prep_stage[@]}; do
	install_software $SOFTWR
done

# Setup Nvidia if it was found
if [[ "$ISNVIDIA" == true ]]; then
	echo -e "$CNT - Nvidia GPU support setup stage, this may take a while..."
	for SOFTWR in ${nvidia_stage[@]}; do
		install_software $SOFTWR
	done

	# update config
	sudo sed -i 's/MODULES=()/MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)/' /etc/mkinitcpio.conf
	sudo mkinitcpio --config /etc/mkinitcpio.conf --generate /boot/initramfs-custom.img
	echo -e "options nvidia-drm modeset=1" | sudo tee -a /etc/modprobe.d/nvidia.conf &>>$INSTLOG
fi

# Install the correct hyprland version
echo -e "$CNT - Installing Hyprland, this may take a while..."
install_software hyprland

# Stage 1 - main components
echo -e "$CNT - Installing main components, this may take a while..."
for SOFTWR in ${install_stage[@]}; do
	install_software $SOFTWR
done

# Start the bluetooth service
echo -e "$CNT - Starting the Bluetooth Service..."
sudo systemctl enable --now bluetooth.service &>>$INSTLOG
sleep 2

# Enable the sddm login manager service
echo -e "$CNT - Enabling the SDDM Service..."
sudo systemctl enable sddm &>>$INSTLOG
sleep 2

# Enable auto-cpufreq service
echo -e "$CNT - Enabling the auto-cpufreq Service..."
sudo systemctl enable auto-cpufreq &>>$INSTLOG
sleep 2

# Clean out other portals
echo -e "$CNT - Cleaning out conflicting xdg portals..."
yay -R --noconfirm xdg-desktop-portal-gnome xdg-desktop-portal-gtk &>>$INSTLOG

# Set up sddm
echo -e "$CNT - Setting up the login screen."
sudo cp -R ~/.config/sddm-rose-pine /usr/share/sddm/themes/
sudo chown -R $USER:$USER /usr/share/sddm/themes/sddm-rose-pine
sudo mkdir /etc/sddm.conf.d
echo -e "[Theme]\nCurrent=sddm-rose-pine" | sudo tee -a /etc/sddm.conf.d/10-theme.conf &>>$INSTLOG
WLDIR=/usr/share/wayland-sessions
if [ -d "$WLDIR" ]; then
	echo -e "$COK - $WLDIR found"
else
	echo -e "$CWR - $WLDIR NOT found, creating..."
	sudo mkdir $WLDIR
fi
# Set up rose pine desktop theme
xfconf-query -c xsettings -p /Net/ThemeName -s "rose-pine-gtk"
xfconf-query -c xsettings -p /Net/IconThemeName -s "rose-pine-icons"
gsettings set org.gnome.desktop.interface gtk-theme "rose-pine-gtk"
gsettings set org.gnome.desktop.interface icon-theme "rose-pine-icons"
gsettings set org.gnome.desktop.interface cursor-theme "BreezeX-RosePine-Linux"

# Set up redshift
systemctl --user enable --now geoclue-agent.service
systemctl --user enable --now redshift.service

# Set up tmux
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
cargo install tmux_sessionizer
tmux source ~/.config/tmux/tmux.conf
# set up spicetify
sudo chmod -R 777 /opt/spotify
spicetify config current_theme Sleek color_scheme rosepine
spicetify backup apply
# set up zsh
cp ~/.config/.zshenv ~
chsh -s /bin/zsh

### Install software for Asus ROG laptops ###
read -rep $'[\e[1;33mACTION\e[0m] - For ASUS ROG Laptops - Would you like to install Asus ROG software support? (y,n) ' ROG
if [[ $ROG == "Y" || $ROG == "y" ]]; then
	echo -e "$CNT - Adding Keys..."
	sudo pacman-key --recv-keys 8F654886F17D497FEFE3DB448B15A6B0E9A3FA35 &>>$INSTLOG
	sudo pacman-key --finger 8F654886F17D497FEFE3DB448B15A6B0E9A3FA35 &>>$INSTLOG
	sudo pacman-key --lsign-key 8F654886F17D497FEFE3DB448B15A6B0E9A3FA35 &>>$INSTLOG
	sudo pacman-key --finger 8F654886F17D497FEFE3DB448B15A6B0E9A3FA35 &>>$INSTLOG

	LOC="/etc/pacman.conf"
	echo -e "$CNT - Updating $LOC with g14 repo."
	echo -e "\n[g14]\nServer = https://arch.asus-linux.org" | sudo tee -a $LOC &>>$INSTLOG
	echo -e "$CNT - Update the system..."
	sudo pacman -Suy --noconfirm &>>$INSTLOG

	echo -e "$CNT - Installing ROG pacakges..."
	install_software asusctl
	install_software supergfxctl
	install_software rog-control-center

	echo -e "$CNT - Activating ROG services..."
	sudo systemctl enable --now power-profiles-daemon.service &>>$INSTLOG
	sleep 2
	sudo systemctl enable --now supergfxd &>>$INSTLOG
	sleep 2

	# add the ROG keybinding file to the config
	echo -e "\nsource = ~/.config/hypr/rog-g15-strix-2021-binds.conf" >>~/.config/hypr/hyprland.conf
fi

### Script is done ###
echo -e "$CNT - Script had completed!"
if [[ "$ISNVIDIA" == true ]]; then
	echo -e "$CAT - Since we attempted to setup an Nvidia GPU the script will now end and you should reboot.
    Please type 'reboot' at the prompt and hit Enter when ready."
	exit
fi

read -rep $'[\e[1;33mACTION\e[0m] - Would you like to start Hyprland now? (y,n) ' HYP
if [[ $HYP == "Y" || $HYP == "y" ]]; then
	exec sudo systemctl start sddm &>>$INSTLOG
else
	exit
fi
